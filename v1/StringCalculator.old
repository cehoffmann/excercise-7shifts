from logging import error
import re

# Function to split the input string using each of the custom delimiters
def delimiterSplit(array, delimiters):
    default_delimiter = delimiters[0]
    for delimiter in delimiters[1:]:
        array = array.replace(delimiter, default_delimiter)
    return [i.strip() for i in array.split(default_delimiter)]

# Main Function
def Add(args=""):
    res = 0
    # Makes sure that the incoming value isn't just blank spaces
    args = args.strip()
    
    if not args:
        return res
    else:
        if  not bool(re.search(r'\d',args)):
            raise ValueError("You haven't entered any valid numbers.")
        else:
            negativeArray = []
            customDelimiters = ""
            
            # Checks for the existance of a custom delimiter
            if args.startswith(r'//'):
                customDelimiters = re.search(r'^//(.*?)\n', args)[1]
                if ',' in customDelimiters:
                    customDelimiters = customDelimiters.split(',')
                cleanArray = list(filter(None, delimiterSplit(args[2:], customDelimiters)))
            else:
                customDelimiters = ','
                cleanArray = list(filter(None, delimiterSplit(args, customDelimiters)))

            for i, v in enumerate(cleanArray):
                cleanValue = re.sub(r'[^\d+-.,]', '', v)
                if cleanValue.isalnum() or '-' in cleanValue:
                    cleanArray[i] = cleanValue
                else:
                    cleanArray.pop(i)

            # Adds the number to its correct array
            for n in cleanArray:
                n = int(n)
                if n < 0:
                    negativeArray.append(n)
                elif n <= 1000:
                    res += n
            
            # Check if no negative numbers were found
            if negativeArray:
                exceptionReturn = ", ".join(str(x) for x in negativeArray)
                raise ValueError("Negative numbers are not allowed. " + exceptionReturn)
            else:
                return res